{
  "course.title": "ReCourse",
  "course.subtitle": "ReCourse is one of the best courses",
  "course.description": "React + TypeScript course — your fast track to building powerful, reliable web apps. Master modern hooks, strong typing for safer code, and best development patterns. Learn hands-on how to create scalable interfaces and work with APIs. Perfect for developers ready to levelup frontend without unnecessary theory.",

  "skills.title": "Skills that you will learn",

  "skills.react.title": "React",
  "skills.react.jsx_and_props": "Build components using JSX and props",
  "skills.react.state_management": "Manage state with useState and useReducer",
  "skills.react.side_effects": "Handle side effects with useEffect",
  "skills.react.performance_optimization": "Work with refs, memoization, and performance hooks",
  "skills.react.events_and_forms": "Handle events and forms",
  "skills.react.context_api": "Use the Context API for shared state",
  "skills.react.lazy_loading": "Load components lazily with React.lazy and Suspense",
  "skills.react.api_integration": "Connect to APIs using fetch, axios",

  "skills.typescript.title": "TypeScript",
  "skills.typescript.type_annotations": "Type annotations, any, unknown, void, never",
  "skills.typescript.primitive_types": "Working with primitives, arrays, tuples, and object types",
  "skills.typescript.type_vs_interface": "The difference between type and interface, and when to use each",
  "skills.typescript.generics": "Using generics in functions, components, and custom hooks",
  "skills.typescript.type_composition": "Combining types with unions, intersections, and type guards",
  "skills.typescript.react_typing": "Typing React props, state, and events",
  "skills.typescript.configuration": "Configuring tsconfig.json for React projects",
  "skills.typescript.utility_types": "Leveraging utility types",

  "skills.architecture.title": "Architecture",
  "skills.architecture.solid_principles": "SOLID",
  "skills.architecture.clean_architecture": "Clean Architecture",
  "skills.architecture.feature_sliced_design": "FSD (Feature Sliced Design)",
  "skills.architecture.avoid_overengineering": "How to avoid overengineering",
  "skills.architecture.state_management": "Managing state effectively: state managers",
  "skills.architecture.async_state": "Working with async data: async state managers",
  "skills.architecture.testing_strategy": "Testing: unit, e2e, integration tests",
  "skills.architecture.component_decomposition": "Where and how to decompose large components",

  "plan.title": "Course plan",
  "plan.subtitle": "10 Modules · Final Project · 70+ Lessons",

  "button.purchase_now": "Purchase Now",
  "button.learn_more": "Learn More",

  "plan.introduction.title": "Introduction",
  "plan.introduction.whatIsReact": "What is React and why TypeScript",
  "plan.introduction.setupEnvironment": "Setting up the environment (Vite + TypeScript)",
  "plan.introduction.projectStructure": "Project structure overview",

  "plan.reactFundamentals.title": "React Fundamentals",
  "plan.reactFundamentals.jsxAndComponents": "JSX and functional components",
  "plan.reactFundamentals.propsAndState": "Props and useState",
  "plan.reactFundamentals.eventsAndForms": "Handling events and forms",
  "plan.reactFundamentals.listsAndKeys": "Rendering lists with keys",
  "plan.reactFundamentals.useEffect": "Using useEffect for side effects",
  "plan.reactFundamentals.conditionalRendering": "Conditional rendering",

  "plan.hooksAndLogic.title": "Hooks & Logic",
  "plan.hooksAndLogic.performanceHooks": "useRef, useMemo, useCallback for performance",
  "plan.hooksAndLogic.useReducer": "useReducer for complex state",
  "plan.hooksAndLogic.contextAPI": "Context API for shared state",
  "plan.hooksAndLogic.customHooks": "Building custom hooks",

  "plan.reactRouter.title": "React Router",
  "plan.reactRouter.installation": "Installing and configuring react-router-dom",
  "plan.reactRouter.routingBasics": "Routing basics: Route, Link, useNavigate",
  "plan.reactRouter.dynamicAndNestedRoutes": "Dynamic and nested routes",
  "plan.reactRouter.lazyLoading": "Lazy loading with React.lazy and Suspense",

  "plan.tsEssentials.title": "TypeScript Essentials",
  "plan.tsEssentials.typeBasics": "Type annotations, primitives, arrays, tuples",
  "plan.tsEssentials.typeVsInterface": "type vs interface",
  "plan.tsEssentials.genericsAndUnions": "Generics, enums, union & intersection types",
  "plan.tsEssentials.typingFunctions": "Typing functions, objects, events, promises",
  "plan.tsEssentials.tsconfig": "Configuring tsconfig.json",

  "plan.tsInReact.title": "TypeScript in React",
  "plan.tsInReact.typingComponents": "Typing props, state, events",
  "plan.tsInReact.typingHooks": "Typing custom hooks and reducers",
  "plan.tsInReact.typingApi": "Typing API responses and form data",
  "plan.tsInReact.utilityTypes": "Using utility types (Partial, Omit, Record, etc.)",
  "plan.tsInReact.errorTyping": "Error typing and handling",

  "plan.workingWithApis.title": "Working with APIs",
  "plan.workingWithApis.fetchingData": "Fetching data with fetch and axios",
  "plan.workingWithApis.errorAndLoading": "Error and loading states",
  "plan.workingWithApis.reactQuery": "Caching and mutations with react-query",
  "plan.workingWithApis.optimisticUpdates": "Optimistic UI updates",

  "plan.formsAndValidation.title": "Forms & Validation",
  "plan.formsAndValidation.reactHookForm": "Handling forms with react-hook-form",
  "plan.formsAndValidation.typedFields": "Strongly-typed form fields",
  "plan.formsAndValidation.validation": "Validation using zod or yup",

  "plan.architectureAndBestPractices.title": "Architecture & Best Practices",
  "plan.architectureAndBestPractices.organizingFiles": "Organizing files: UI, features, shared code",
  "plan.architectureAndBestPractices.componentResponsibility": "Component responsibility separation",
  "plan.architectureAndBestPractices.reusableLogic": "Centralizing reusable logic (hooks, utils)",
  "plan.architectureAndBestPractices.codeSplitting": "Lazy loading and code splitting",
  "plan.architectureAndBestPractices.cleanCode": "Clean, scalable, readable code practices",

  "plan.testing.title": "Testing",
  "plan.testing.setup": "Setting up Jest + React Testing Library",
  "plan.testing.renderingTests": "Rendering and interaction tests",
  "plan.testing.mockingAsync": "Mocking async behavior",
  "plan.testing.testingHooks": "Testing custom hooks and logic"
}
